import { assertEquals } from "https://deno.land/std/testing/asserts.ts";
import lemonadeChange from "./lemonadeChange.ts";

Deno.test("0860. Lemonade Change", () => {
  // assertEquals(lemonadeChange([5, 5, 5, 10, 20]), true);
  // assertEquals(lemonadeChange([5, 5, 10]), true);
  // assertEquals(lemonadeChange([10, 10]), false);
  // assertEquals(lemonadeChange([5, 5, 10, 10, 20]), false);
  assertEquals(
    lemonadeChange([
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20,
      5,
      10,
      5,
      20
    ]),
    true
  );
});
